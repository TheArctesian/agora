package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"agora/graph/generated"
	"agora/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateConnection is the resolver for the createConnection field.
func (r *mutationResolver) CreateConnection(ctx context.Context, input model.CreateConnectionInput) (*model.Connection, error) {
	panic(fmt.Errorf("not implemented: CreateConnection - createConnection"))
}

// UpdateConnection is the resolver for the updateConnection field.
func (r *mutationResolver) UpdateConnection(ctx context.Context, id string, input model.UpdateConnectionInput) (*model.Connection, error) {
	panic(fmt.Errorf("not implemented: UpdateConnection - updateConnection"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// NetworkMap is the resolver for the networkMap field.
func (r *queryResolver) NetworkMap(ctx context.Context) ([]*model.Connection, error) {
	panic(fmt.Errorf("not implemented: NetworkMap - networkMap"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
